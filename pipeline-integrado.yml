trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - main

jobs:
- job: CreateMinikubeCluster
  pool:
    name: default
  steps:
  - checkout: self

  # Paso 1: Clonar el repositorio de la página web
  - script: |
      git clone https://github.com/Ycasall/personal-website.git
    displayName: 'Clone the web project repository'

  # Paso 2: Verificar instalación de Docker
  - script: |
      docker --version
      docker run hello-world
      ls -l /var/run/docker.sock
    displayName: 'Verify Docker installation'

  # Paso 3: Iniciar Minikube con Docker como driver
  - script: |
      minikube start --driver=docker
    displayName: 'Start Minikube cluster'

  # Paso 4: Configurar kubectl para usar Minikube
  - script: |
      kubectl config use-context minikube
    displayName: 'Set kubeconfig'

  # Paso 5: Construir la imagen Docker desde el Dockerfile
  - script: |
      cd personal-website
      docker build -t personal-website:v2 .
    displayName: 'Build Docker image for web app'

  # Paso 6: Ejecutar SonarScanner usando Docker con la nueva configuración
  - script: |
      docker run --rm \
        -v "$(pwd)/personal-website:/usr/src" \
        -e SONAR_HOST_URL="https://sonarqube.awsbanbogota.com" \
        -e SONAR_LOGIN="797dd4235097a4e698ca1414bdb45199cbcd88ff" \
        sonarsource/sonar-scanner-cli:latest \
        -Dsonar.projectKey=ycasall-personal-webApp \
        -Dsonar.sources=. \
        -Dsonar.host.url=https://sonarqube.awsbanbogota.com \
        -Dsonar.login=797dd4235097a4e698ca1414bdb45199cbcd88ff
    displayName: 'Run SonarQube Analysis with Docker'

  # Paso 7: Subir la imagen a Docker Hub (opcional)
  - script: |
      docker login -u $(DOCKER_USERNAME) -p $(DOCKER_PASSWORD)
      docker tag personal-website:v2 efreway/personal-website:v2
      docker push efreway/personal-website:v2
    displayName: 'Push Docker image to Docker Hub'

  # Paso 8: Desplegar la aplicación web con Kubernetes
  - script: |
      kubectl apply -f personal-website/deployment.yaml
    displayName: 'Deploy web app to Minikube'

  # Paso 9: Desplegar el servicio para exponer la página web
  - script: |
      kubectl apply -f personal-website/services.yaml
    displayName: 'Expose web app service'

  # Paso 10: Verificar estado del clúster y Pods
  - script: |
      kubectl get nodes
      kubectl get pods
    displayName: 'Check cluster and pod status'

  # Paso 11: Obtener la URL del servicio expuesto
  - script: |
      export SERVICE_URL=$(minikube service website-personal-service --url)
      echo "Service URL: $SERVICE_URL"
      echo "##vso[task.setvariable variable=SERVICE_URL]$SERVICE_URL"
    displayName: 'Get Service URL'

  # Paso 12: Probar la conectividad con curl
  - script: |
      curl -I $(SERVICE_URL)
      curl $(SERVICE_URL)
    displayName: 'Test connectivity with curl'