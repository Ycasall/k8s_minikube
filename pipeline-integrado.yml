trigger:
  branches:
    include:
      - main
      - develop
pr:
  branches:
    include:
      - main
      - develop

jobs:
- job: CreateMinikubeClusterSonar
  pool:
    name: default
  steps:
  # Paso 1: Clonar los repositorios manualmente y verificar estructura
  - script: |
      git clone https://github.com/Ycasall/personal-website.git
      git clone https://github.com/Ycasall/pipeline-templates.git
      ls -R pipeline-templates
    displayName: 'Clone repositories and check structure'

  # Paso 2: Verificar instalación de Docker
  - script: |
      docker --version
      docker run hello-world
      ls -l /var/run/docker.sock
    displayName: 'Verify Docker installation'

  # Paso 3: Iniciar Minikube con Docker como driver
  - script: |
      minikube start --driver=docker
    displayName: 'Start Minikube cluster'

  # Paso 4: Configurar kubectl para usar Minikube
  - script: |
      kubectl config use-context minikube
    displayName: 'Set kubeconfig'

  # Paso 5: Construir la imagen Docker desde el Dockerfile
  - script: |
      cd personal-website
      docker build -t personal-website:v2 .
    displayName: 'Build Docker image for web app'

  # Paso 6: Ejecutar SonarScanner usando Docker
  - script: |
      export SONAR_HOST_URL=$(cat ./pipeline-templates/sonar-config.yaml | grep hostUrl | awk '{print $2}' | tr -d '"')
      export SONAR_LOGIN=$(cat ./pipeline-templates/sonar-config.yaml | grep loginToken | awk '{print $2}' | tr -d '"')
      export SONAR_PROJECT_KEY=$(cat ./pipeline-templates/sonar-config.yaml | grep projectKey | awk '{print $2}' | tr -d '"')
      echo "##vso[task.setvariable variable=SONAR_HOST_URL]$SONAR_HOST_URL"
      echo "##vso[task.setvariable variable=SONAR_LOGIN]$SONAR_LOGIN"
      echo "##vso[task.setvariable variable=SONAR_PROJECT_KEY]$SONAR_PROJECT_KEY"

      docker run --rm \
        -v "$(pwd)/personal-website:/usr/src" \
        -e SONAR_HOST_URL="$(SONAR_HOST_URL)" \
        -e SONAR_LOGIN="$(SONAR_LOGIN)" \
        sonarsource/sonar-scanner-cli:latest \
        -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
        -Dsonar.sources=. \
        -Dsonar.host.url=$(SONAR_HOST_URL) \
        -Dsonar.login=$(SONAR_LOGIN)
    displayName: 'Run SonarQube Analysis with Docker'

  # Paso 7: Subir la imagen a Docker Hub (opcional)
  - script: |
      docker login -u $(DOCKER_USERNAME) -p $(DOCKER_PASSWORD)
      docker tag personal-website:v2 efreway/personal-website:v2
      docker push efreway/personal-website:v2
    displayName: 'Push Docker image to Docker Hub'

  # Paso 8: Desplegar la aplicación web con Kubernetes
  - script: |
      kubectl apply -f personal-website/deployment.yaml
    displayName: 'Deploy web app to Minikube'

  # Paso 9: Desplegar el servicio para exponer la página web
  - script: |
      kubectl apply -f personal-website/services.yaml
    displayName: 'Expose web app service'

  # Paso 10: Ejecutar custom-tests.sh en lugar de YAML
  - script: |
      chmod +x pipeline-templates/custom-tests.sh
      ./pipeline-templates/custom-tests.sh website-personal-service
    displayName: 'Run custom tests script'

  # Paso 11: Verificar estado del clúster y Pods
  - script: |
      kubectl get nodes
      kubectl get pods
    displayName: 'Check cluster and pod status'
